/**
 * Flow
 */

import type { FragmentReference } from "relay-runtime";
export opaque type LinkedField$ref: FragmentReference = FragmentReference;
export type LinkedField = {|
  +profilePicture: ?{|
    +uri: ?string,
    +width: ?number,
    +height: ?number,
  |},
  +hometown: ?{|
    +id: string,
    +profilePicture: ?{|
      +uri: ?string
    |},
  |},
  +actor: ?{|
    +id: string
  |},
  +$refType: LinkedField$ref,
|};

export type UnionTypeTestVariables = {||};
export type UnionTypeTestResponse = {|
  +neverNode: ?(({|
    +__typename: "FakeNode",
    +id: string,
  |} | {|
    // This will never be "%other", but we need some
    // value in case none of the concrete values match.
    +__typename: "%other"
  |}))
|};

/**
 * TypeScript
 */

import { FragmentReference } from "relay-runtime";
export type LinkedFieldRef = FragmentReference;
export interface LinkedField {
  readonly profilePicture: {
    readonly uri: string | null;
    readonly width: number | null;
    readonly height: number | null;
  } | null;
  readonly hometown: {
    readonly id: string;
    readonly profilePicture: {
      readonly uri: string | null;
    } | null;
  } | null;
  readonly actor: {
    readonly id: string;
  } | null;
  readonly refType: LinkedFieldRef;
}

export interface UnionTypeTestVariables {}
export interface UnionTypeTestResponse {
  readonly neverNode: {
    readonly __typename: "FakeNode";
    readonly id: string;
  } | {
    // This will never be "%other", but we need some
    // value in case none of the concrete values match.
    readonly __typename: "%other";
  } | null;
}
