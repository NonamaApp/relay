/**
 * Flow
 */

export type ExampleQueryVariables = {|
  id: string
|};
export type ExampleQueryResponse = {|
  +node: ?{|
    +id: string
  |}
|};

import type { FragmentReference } from "relay-runtime";
export opaque type ExampleFragment$ref: FragmentReference = FragmentReference;
export type ExampleFragment = {|
  +id: string,
  +$refType: ExampleFragment$ref,
|};

export type TestMutationVariables = {|
  input: {
    clientMutationId?: ?string,
    feedbackId?: ?string,
  }
|};
export type TestMutationResponse = {|
  +commentCreate: ?{|
    +comment: ?{|
      +id: string
    |}
  |}
|};

export type TestSubscriptionVariables = {|
  input?: ?{
    clientMutationId?: ?string,
    feedbackId?: ?string,
  }
|};
export type TestSubscriptionResponse = {|
  +feedbackLikeSubscribe: ?{|
    +feedback: ?{|
      +id: string
    |}
  |}
|};

/**
 * TypeScript
 */

export interface ExampleQueryVariables {
  id: string;
}
export interface ExampleQueryResponse {
  readonly node: {
    readonly id: string;
  } | null;
}

import { FragmentReference } from "relay-runtime";
export type ExampleFragmentRef = FragmentReference;
export interface ExampleFragment {
  readonly id: string;
  readonly refType: ExampleFragmentRef;
}

export interface TestMutationVariables {
  input: {
    clientMutationId?: string | null;
    feedbackId?: string | null;
  };
}
export interface TestMutationResponse {
  readonly commentCreate: {
    readonly comment: {
      readonly id: string;
    } | null;
  } | null;
}

export interface TestSubscriptionVariables {
  input?: {
    clientMutationId?: string | null;
    feedbackId?: string | null;
  } | null;
}
export interface TestSubscriptionResponse {
  readonly feedbackLikeSubscribe: {
    readonly feedback: {
      readonly id: string;
    } | null;
  } | null;
}
