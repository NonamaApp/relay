/**
 * Flow
 */

export type PersonalityTraits = ("CHEERFUL" | "DERISIVE" | "HELPFUL" | "SNARKY" | "%future added value");
import type { FragmentReference } from "relay-runtime";
export opaque type ScalarField$ref: FragmentReference = FragmentReference;
export type ScalarField = {|
  +id: string,
  +name: ?string,
  +websites: ?$ReadOnlyArray<?string>,
  +traits: ?$ReadOnlyArray<?PersonalityTraits>,
  +aliasedLinkedField: ?{|
    +aliasedField: ?number
  |},
  +screennames: ?$ReadOnlyArray<?{|
    +name: ?string,
    +service: ?string,
  |}>,
  +$refType: ScalarField$ref,
|};

/**
 * TypeScript
 */

export type PersonalityTraits = "CHEERFUL" | "DERISIVE" | "HELPFUL" | "SNARKY" | "%future added value";
import { FragmentReference } from "relay-runtime";
export type ScalarFieldRef = FragmentReference;
export interface ScalarField {
  readonly id: string;
  readonly name: string | null;
  readonly websites: ReadonlyArray<string | null> | null;
  readonly traits: ReadonlyArray<PersonalityTraits | null> | null;
  readonly aliasedLinkedField: {
    readonly aliasedField: number | null;
  } | null;
  readonly screennames: ReadonlyArray<{
    readonly name: string | null;
    readonly service: string | null;
  } | null> | null;
  readonly refType: ScalarFieldRef;
}
