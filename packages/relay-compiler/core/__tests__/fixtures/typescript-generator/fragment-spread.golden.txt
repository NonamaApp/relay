type OtherFragmentRef = any;
type PictureFragmentRef = any;
type UserFrag1Ref = any;
type UserFrag2Ref = any;
import { FragmentReference } from "relay-runtime";
export type FragmentSpreadRef = FragmentReference;
export interface FragmentSpread {
  readonly id: string;
  readonly justFrag: {
    readonly __fragments: PictureFragmentRef;
  } | null;
  readonly fragAndField: {
    readonly uri: string | null;
    readonly __fragments: PictureFragmentRef;
  } | null;
  readonly __fragments: OtherFragmentRef & UserFrag1Ref & UserFrag2Ref;
  readonly refType: FragmentSpreadRef;
}

type PageFragmentRef = any;
import { FragmentReference } from "relay-runtime";
export type ConcreateTypesRef = FragmentReference;
export interface ConcreateTypes {
  readonly actor: {
    readonly __typename: "Page";
    readonly id: string;
    readonly __fragments: PageFragmentRef;
  } | {
    readonly __typename: "User";
    readonly name: string | null;
  } | {
    // This will never be "%other", but we need some
    // value in case none of the concrete values match.
    readonly __typename: "%other";
  } | null;
  readonly refType: ConcreateTypesRef;
}
