/**
 * Flow
 */

import type { FragmentReference } from "relay-runtime";
export opaque type ConditionField$ref: FragmentReference = FragmentReference;
export type ConditionField = {|
  +id?: string,
  +$refType: ConditionField$ref,
|};

import type { FragmentReference } from "relay-runtime";
export opaque type NestedCondition$ref: FragmentReference = FragmentReference;
export type NestedCondition = {|
  +id?: string,
  +$refType: NestedCondition$ref,
|};

/**
 * TypeScript
 */

import { FragmentReference } from "relay-runtime";
export type ConditionField$ref = FragmentReference;
export interface ConditionField {
  readonly id?: string;
  readonly $refType: ConditionField$ref;
}

import { FragmentReference } from "relay-runtime";
export type NestedCondition$ref = FragmentReference;
export interface NestedCondition {
  readonly id?: string;
  readonly $refType: NestedCondition$ref;
}
